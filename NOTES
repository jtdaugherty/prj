
Approach:

  Shell script library to aid in managing project-specific shell
  context

Basic Use Case:

  - path modifications
  - environment variables
  - functions

Requirements:

  - does not *replace* running shell like prj-old; merely augments it
    with project-specific stuff

  - should be easy to know when you are "in" a project (e.g., by
    modifying the prompt in a predictable way)

  - should be easy to "enter" a project (not sure whether it's
    feasible to support "leaving" a project in any way other than
    exiting the shell)

  - probably not reasonable to be shell-agnostic; just adopt bash and
    call it a day

  - should provide infrastructure for managing things like env,
    functions, etc. with hooks for loading new scripts and installing
    them into already-running project instances

  - should aid in development and use but not create a dependency on
    the tool itself unless the tool is going to become a known part of
    the project toolchain

  - should facilitate the storage and loading of project-specific
    shell history (see "history" shell builtin command for ability to
    read, write, and set history file)

  - where possible, the project initialization script(s) created by
    prj and managed by the user should also be usable without prj;
    this probably isn't reasonable if we want prj to provide some nice
    functions for making it easier to write scripts

Integration:

  - Add a very, very minimal amount of code to ~/.bashrc; hopefully
    something as simple as

      . /path/to/prj.sh

Commands:

  - prj-init [name]: create basic scripts in the current directory and
    register the current directory as a "project", specify name to
    override default project name of (basename `pwd`)

  - prj-register [name]: called by prj-init, useful by itself for
    projects cloned from remote sources, specify [name] to override
    default project name of (basename `pwd`)

  - prj-unregister <name>: unregister a project

  - prj-list: list registered projects

  - prj <name>: switch to a project

  - prj-home: called by prj, cd to a project's directory

Notes:

  - prj script's initialization should look at inherited environment
    variable of parent process to see whether to autoload a project
    (use case: screen, subshells)

Registration:

  - registration merely creates a symlink in a well-known (to 'prj')
    location, such as ~/.projects/

  - prj never *caches* registered project names; should always hit the
    symlink directory so as to permit already-running shells to switch
    to new projects without reloading the prj lib

Misc:

  - A project's files should NEVER need to specify its path
    absolutely, but should be provided with a variable for referring
    to the project's directory
